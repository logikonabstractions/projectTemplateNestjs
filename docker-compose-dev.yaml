version: "3"
# uses build time envars from .env
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: mynode
    container_name: frontend
    restart: unless-stopped
    # those are run-time variables, available within containers
    env_file:
      - .runtime.env
    ports:
      - ${REACT_PORT}:${REACT_PORT}
    volumes:
      # bind mount so that local changes get reflected into running container directly
      - type: bind
        source: ./frontend
        target: /home/node/app/frontend
      #  name volume so that stuff installed w npm installed is persisted
      - type: volume
        source: node_modules_frontend
        target: /home/node/app/frontend/node_modules
    command: ./startup.sh

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: mynestjs
    container_name: backend
    restart: unless-stopped
    # TODO: configure backend code so it source those envars for db cx
    env_file:
      - .env
      - .runtime.env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    # this is key - see readme for technical details.
    volumes:
      - type: bind
        source: ./backend
        target: /home/node/app/backend
      - type: volume
        source: node_modules_backend
        target: /home/node/app/backend/node_modules
      - type: bind
        source: ./frontend/build
        target: /home/node/app/frontend/build
    # if no new package, npm install is really quick. if new stuff in package.json, installs it to our persistent node_modules_backend vol.
    command: bash -c "npm install && npm run start:dev"
    # ensures we start the backend only after the mongo container is up & running
    depends_on:
      db_container:
        condition: service_started
  db_container:
    image: mongo:latest
    container_name: mongoContainer
    env_file:
      - .env
      - .runtime.env
    environment:
      # those are officiel mongo envars named. see mongo img on dockerhub for details
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      # mapping /data/db in container to named volume, so data is persisted between runs
      - mongodb_data:/data/db
      - mongodb_configs:/data/configdb

  # a simple db explorer running on localhost:8081
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_PASS}
      ME_CONFIG_MONGODB_URL: ${DB_ROOTURL}${DB_USER}:${DB_PASS}@${DB_SERVICENAME}:${DB_PORT}/
    depends_on:
      db_container:
        condition: service_started

# named volumes for persistent data
volumes:
  mongodb_data:
  mongodb_configs:
  node_modules_backend:
  node_modules_frontend:
