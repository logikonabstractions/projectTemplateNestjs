version: "3"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: node
    container_name: frontend
    restart: unless-stopped
    environment:
      # whether or not to build the react app under frontend/build. will slow down startup of react dev server (since it will build first)
      - BUILDREACT=false

    ports:
      - 3001:3001
    volumes:
      # bind mount so that local changes get reflected into running container directly
      - type: bind
        source: ./frontend
        target: /home/node/app/frontend
      #  name volume so that stuff installed w npm installed is persisted
      - type: volume
        source: node_modules_frontend
        target: /home/node/app/frontend/node_modules
    command: ./startup.sh

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: mynestjs
    container_name: backend
    restart: unless-stopped
    # TODO: configure backend code so it source those envars for db cx
    # environment:
      # - DB_ROOTURL=mongodb://
      # - DB_USER=root
      # - DB_PASS=pass12345
      # - DB_PORT=27017
      # - DB_SERVICENAME=mongodb
      # - NODE_ENV=production
    ports:
      - "3000:3000"
    # this is key - see readme for technical details.
    volumes:
      - type: bind
        source: ./backend
        target: /home/node/app/backend
      - type: volume
        source: node_modules_backend
        target: /home/node/app/backend/node_modules
      - type: bind
        source: ./frontend/build
        target: /home/node/app/frontend/build
    # if no new package, npm install is really quick. if new stuff in package.json, installs it to our persistent node_modules_backend vol.
    command: bash -c "npm install && npm run start:dev"
    # ensures we start the backend only after the mongo container is up & running
    depends_on:
      mongo:
        condition: service_started
  mongo:
    image: mongo:latest
    container_name: mongoContainer
    environment:
      # those are officiel mongo envars named. see mongo img on dockerhub for details
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
    volumes:
      # mapping /data/db in container to named volume, so data is persisted between runs
      - mongodb_data:/data/db
      - mongodb_configs:/data/configdb

  # a simple db explorer running on localhost:8081
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      mongo:
        condition: service_started

# named volumes for persistent data
volumes:
  mongodb_data:
  mongodb_configs:
  node_modules_backend:
  node_modules_frontend:
